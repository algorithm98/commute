import {
  createNextRouteHandler
} from "./chunk-WELHSF7T.mjs";
import {
  UPLOADTHING_VERSION,
  createBuilder
} from "./chunk-UNVWQBTP.mjs";
import {
  __export
} from "./chunk-4NWFEIIR.mjs";

// src/internal/types.ts
var unsetMarker = "unsetMarker";

// src/sdk/index.ts
var sdk_exports = {};
__export(sdk_exports, {
  deleteFiles: () => deleteFiles,
  getFileUrls: () => getFileUrls
});
import { generateUploadThingURL } from "@uploadthing/shared";
var UT_SECRET = process.env.UPLOADTHING_SECRET;
var deleteFiles = async (fileKeys) => {
  if (!Array.isArray(fileKeys))
    fileKeys = [fileKeys];
  if (!UT_SECRET)
    throw new Error("Missing UPLOADTHING_SECRET env variable.");
  const res = await fetch(generateUploadThingURL("/api/deleteFile"), {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "x-uploadthing-api-key": UT_SECRET,
      "x-uploadthing-version": UPLOADTHING_VERSION
    },
    body: JSON.stringify({ fileKeys })
  });
  if (!res.ok) {
    throw new Error("Failed to delete files");
  }
  return res.json();
};
var getFileUrls = async (fileKeys) => {
  if (!Array.isArray(fileKeys))
    fileKeys = [fileKeys];
  if (!UT_SECRET)
    throw new Error("Missing UPLOADTHING_SECRET env variable.");
  const res = await fetch(generateUploadThingURL("/api/getFileUrl"), {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "x-uploadthing-api-key": UT_SECRET,
      "x-uploadthing-version": UPLOADTHING_VERSION
    },
    body: JSON.stringify({ fileKeys })
  });
  if (!res.ok) {
    throw new Error("Failed to get file urls");
  }
  return res.json().then(({ data }) => data);
};

// src/internal/edge.ts
var createServerHandler = (...args) => {
  const handler = createNextRouteHandler(...args);
  const thisHandler = (method) => (event) => handler[method](event instanceof Request ? event : event.request);
  return {
    GET: thisHandler("GET"),
    POST: thisHandler("POST")
  };
};

// src/server.ts
var createUploadthing = (opts) => createBuilder(opts);
export {
  createServerHandler,
  createUploadthing,
  unsetMarker,
  sdk_exports as utapi
};
//# sourceMappingURL=server.mjs.map