import { F as FileRouter, U as UploadBuilder } from './types-4f6e81ca.js';
export { b as AnyParams, A as AnyRuntime, E as ErrorMessage, M as MaybePromise, S as Simplify, a as UnsetMarker, c as UploadBuilderDef, d as Uploader, i as inferEndpointInput, e as inferErrorShape, u as unsetMarker } from './types-4f6e81ca.js';
import * as _uploadthing_shared from '@uploadthing/shared';
import { Json } from '@uploadthing/shared';
import { R as RouterWithConfig, C as CreateBuilderOptions } from './handler-2fa97a9b.js';
import 'next';
import 'next/server';

/**
 * Request to delete files from UploadThing storage.
 * @param {string | string[]} fileKeys
 * @example
 * await deleteFiles("2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg");
 * @example
 * await deleteFiles(["2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg","1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg"])
 */
declare const deleteFiles: (fileKeys: string[] | string) => Promise<{
    success: boolean;
}>;
/**
 * Request file URLs from UploadThing storage.
 * @param {string | string[]} fileKeys
 * @example
 * const data = await getFileUrls("2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg");
 * console.log(data); // [{key: "2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg", url: "https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg"}]
 *
 * @example
 * const data = await getFileUrls(["2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg","1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg"])
 * console.log(data) // [{key: "2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg", url: "https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg" },{key: "1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg", url: "https://uploadthing.com/f/1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg"}]
 */
declare const getFileUrls: (fileKeys: string[] | string) => Promise<{
    key: string;
    url: string;
}[]>;

declare const index_deleteFiles: typeof deleteFiles;
declare const index_getFileUrls: typeof getFileUrls;
declare namespace index {
  export {
    index_deleteFiles as deleteFiles,
    index_getFileUrls as getFileUrls,
  };
}

declare const createServerHandler: (opts: RouterWithConfig<FileRouter>) => {
    GET: (event: {
        request: Request;
    } | Request) => Response | Promise<Response>;
    POST: (event: {
        request: Request;
    } | Request) => Response | Promise<Response>;
};

declare const createUploadthing: <TErrorShape extends Json>(opts?: CreateBuilderOptions<TErrorShape> | undefined) => (input: _uploadthing_shared.FileRouterInputConfig) => UploadBuilder<{
    _input: "unsetMarker" & {
        __brand: "unsetMarker";
    };
    _metadata: "unsetMarker" & {
        __brand: "unsetMarker";
    };
    _runtime: "web";
    _errorShape: TErrorShape;
}>;

export { FileRouter, UploadBuilder, createServerHandler, createUploadthing, index as utapi };
